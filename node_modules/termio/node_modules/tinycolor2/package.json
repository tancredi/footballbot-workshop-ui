{
  "version": "0.9.18",
  "name": "tinycolor2",
  "description": "Fast Color Parsing and Manipulation",
  "url": "http://bgrins.github.com/TinyColor",
  "repository": {
    "type": "git",
    "url": "https://bgrins.github.com/TinyColor"
  },
  "keywords": [
    "color",
    "parser",
    "tinycolor"
  ],
  "author": {
    "name": "Brian Grinstead",
    "email": "briangrinstead@gmail.com",
    "url": "http://briangrinstead.com"
  },
  "contributors": [],
  "main": "./tinycolor.js",
  "directories": {},
  "engines": {
    "node": "*"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-qunit": "~0.2.2",
    "grunt-contrib-concat": "~0.1.3",
    "grunt-contrib-uglify": "~0.2.0",
    "grunt-docco": "~0.2.0"
  },
  "readme": "# TinyColor\n\n## JavaScript color parsing\n\nFast, small color manipulation and conversion for JavaScript.  TinyColor is allows many forms of input, while providing color conversions and other color utility functions.  It has no dependancies.\n\n[![Build Status](https://travis-ci.org/bgrins/TinyColor.png?branch=master)](https://travis-ci.org/bgrins/TinyColor)\n\n## Supported Color Types\n\n### Hex, 8-digit (ARGB) Hex\n\n    tinycolor(\"#000\");\n    tinycolor(\"000\");\n    tinycolor(\"#f0f0f6\");\n    tinycolor(\"f0f0f6\");\n    tinycolor(\"#88f0f0f6\");\n    tinycolor(\"88f0f0f6\");\n\n### RGB, RGBA\n\n    tinycolor(\"rgb (255, 0, 0)\");\n    tinycolor(\"rgb 255 0 0\");\n    tinycolor(\"rgba (255, 0, 0, .5)\");\n    tinycolor({ r: 255, g: 0, b: 0 });\n    tinycolor.fromRatio({ r: 1, g: 0, b: 0 });\n    tinycolor.fromRatio({ r: .5, g: .5, b: .5 });\n\n### HSL, HSLA\n\n    tinycolor(\"hsl(0, 100%, 50%)\");\n    tinycolor(\"hsla(0, 100%, 50%, .5)\");\n    tinycolor(\"hsl(0, 100%, 50%)\");\n    tinycolor(\"hsl 0 1.0 0.5\");\n    tinycolor({ h: 0, s: 1, l: .5 });\n\n### HSV, HSVA\n\n    tinycolor(\"hsv(0, 100%, 100%)\");\n    tinycolor(\"hsva(0, 100%, 100%, .5)\");\n    tinycolor(\"hsv (0 100% 100%)\");\n    tinycolor(\"hsv 0 1 1\");\n    tinycolor({ h: 0, s: 100, v: 100 });\n\n### Named\n\n    tinycolor(\"RED\");\n    tinycolor(\"blanchedalmond\");\n    tinycolor(\"darkblue\");\n\n## Using in a browser\n\n    <script type='text/javascript' src='tinycolor.js'></script>\n    <script type='text/javascript'>\n    var t = tinycolor(\"red\");\n\n    t.toHex() // \"ff0000\"\n    t.toHexString() // \"#ff0000\"\n    t.toHex8() // \"ffff0000\"\n    t.toHex8String() // \"#ffff0000\"\n    t.toRgb() // {\"r\":255,\"g\":0,\"b\":0} or {\"r\":255,\"g\":0,\"b\":0,\"a\":0.5}\n    t.toRgbString() // \"rgb(255, 0, 0)\" or \"rgba(255, 0, 0, 0.5)\"\n    t.toPercentageRgb() // {\"r\":100,\"g\":0,\"b\":0} or {\"r\":100,\"g\":0,\"b\":0,\"a\":0.5}\n    t.toPercentageRgbString() // \"rgb(100%, 0%, 0%)\" or \"rgba(100%, 0%, 0%, 0.5)\"\n    t.toHsv() // {\"h\":0,\"s\":1,\"v\":1}\n    t.toHsvString() // \"hsv(0, 100%, 100%)\"\n    t.toHsl() // {\"h\":0,\"s\":1,\"l\":0.5}\n    t.toHslString() // \"hsl(0, 100%, 50%)\"\n    t.toName() // \"red\"\n    t.toString(/* format */) // \"red\"\n    t.toFilter()\n    </script>\n\n## Using in node\n\n`tinycolor` may also be included as a [node](http://nodejs.org/) module like so:\n\n```\nnpm install tinycolor2\n```\n\nThen it can be used:\n\n```js\nvar tinycolor = require(\"./tinycolor\");\n```\n\n### Accepted String Input\n\nThe string parsing is very permissive.  It is meant to make typing a color as input as easy as possible.  All commas, percentages, parenthesis are optional, and most input allow either 0-1, 0%-100%, or 0-n (where n is either 100, 255, or 360 depending on the value).\n\nHSL and HSV both require either 0%-100% or 0-1.\n\nRGB input requires either 0-255 or 0%-100%.\n\nIf you call `tinycolor.fromRatio`, RGB input can also accept 0-1\nHere are some examples of string input:\n\n```\nred\n#fff\nfff\n#ffffff\nffffff\n#ffffffff\nffffffff\nrgb(255, 0, 0)\nrgb 255 0 0\nhsl(0, 100, 50)\nhsl(0, 100%, 50%)\nhsl 0 100 50\nhsl 0 100% 50%\nhsv(0, 100%, 100%)\nhsv(0, 100, 100)\nhsv 0 100% 100%\nhsv 0 100 100\n```\n\n### Accepted Object Input\n\nIf you are calling this from code, you may want to use object input.  Here are examples of the different types of accepted object inputs:\n\n```js\n{ r: 255, g: 0, b: 0 }\n{ r: 255, g: 0, b: 0, a: .5 }\n{ h: 0, s: 100, l: 50 }\n{ h: 0, s: 100, v: 100 }\n// etc...\n```\n\n## Color Utilities\n\n    tinycolor.equals(color1, color2)\n\n### Color Modification\n\nModification functions may take an `amount` variable from 0 - 100, indicating how much the effect should be applied.\n\n    tinycolor.lighten(color, amount = 10)\n    tinycolor.darken(color, amount = 10)\n    tinycolor.desaturate(color, amount = 10)\n    tinycolor.saturate(color, amount = 10)\n    tinycolor.greyscale(color)\n\n### Color Combinations\n\nCombination functions return an Array of TinyColor objects.\n\n    tinycolor.analogous(color, results = 6, slices = 30)\n    tinycolor.complement(color)\n    tinycolor.monochromatic(color, results = 6)\n    tinycolor.splitcomplements(color)\n    tinycolor.triad(color)\n    tinycolor.tetrad(color)\n\n### Readability\n\nAnalyze 2 colors and returns an object with the following properties.  `brightness` is difference in brightness between the two colors.  `color`: difference in color/hue between the two colors.\n\n    tinycolor.readability(color1, color2);\n\nEnsure that foreground and background color combinations provide sufficient contrast.\n\n    tinycolor.readable(color1, color2);\n\nGiven a base color and a list of possible foreground or background colors for that base, returns the most readable color.\n\n    tinycolor.mostReadable(baseColor, colorList);\n\nSee [index.html](https://github.com/bgrins/TinyColor/blob/master/index.html) in the project for a demo.\n",
  "readmeFilename": "README.md",
  "_id": "tinycolor2@0.9.18",
  "_shasum": "fdeb51b119188c54d98dbd93751e541685140996",
  "_from": "tinycolor2@^0.9.17",
  "_resolved": "https://registry.npmjs.org/tinycolor2/-/tinycolor2-0.9.18.tgz"
}
