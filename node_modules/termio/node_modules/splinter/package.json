{
  "name": "splinter",
  "version": "0.0.1",
  "description": "Split an object-mode stream into multiple streams by filtering the chunks.",
  "main": "index.js",
  "scripts": {
    "test": "mocha -R spec test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/stayradiated/splinter"
  },
  "keywords": [
    "split",
    "stream",
    "filter",
    "object",
    "mode",
    "multiple",
    "pipe",
    "pass",
    "through"
  ],
  "author": {
    "name": "George Czabania"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/stayradiated/splinter/issues"
  },
  "homepage": "https://github.com/stayradiated/splinter",
  "devDependencies": {
    "mocha": "^1.18.2",
    "chai": "^1.9.1"
  },
  "dependencies": {
    "underscore": "^1.6.0"
  },
  "readme": "splinter\n========\n\n> Split an object-mode stream into multiple streams by filtering the chunks\n\n## Install\n\n```\nnpm install --save splinter\n```\n\n## Example Usage\n\n```javascript\nvar Splinter = require('splinter');\n\n// create a new instance\nvar splinter = new Splinter(function (chunk) {\n    // this converts the chunk into a value that can be matched against\n    return typeof(chunk);\n});\n\n// create some new output streams\nvar booleans = splinter.match('boolean')\nvar numbers  = splinter.match('number');\nvar objects  = splinter.match('object');\n\n// send some data into the splinter\nsplinter.write(true);\nsplinter.write(10);\nsplinter.write({ foo: 'bar' });\n\n// ... and it is automatically sent to the right output\nbooleans.read(); // true\nnumbers.read();  // 10\nobjects.read();  // { foo: 'bar' }\n\n// ... anything that doesn't match will be passed through the splinter\nsplinter.write('no matches');\nsplinter.read(); // 'no matches'\n```\n\n## API\n\n### Splinter([toValue])\n\nCreate a new instance. Can be called with or without `new`.\n\nInherits from `Stream.Transform`.\n\n**Parameters:**\n\n- `toValue`: *optional*. Converts the chunk into a value. By default it just\n  uses the chunk as the value.\n\n**Example:**\n\n```javascript\nvar splinter = new Splinter(function (chunk) {\n    return chunk.length;\n});\n\nsplinter.match(3); // match chunks with a length of 3\n```\n\n### Splinter.prototype.match(value)\n\n**Parameters:**\n\n- `value`: What to check the chunk against. Can be a value or a function.\n\n**Returns:**\n\nA Readable stream that will output any chunks that match the `value`.\n\n**Example:**\n\n```javascript\nvar splinter = new Splinter();\n\n// match against a value\nvar streamA = splinter.match('a value');\n\n// match against an object with deep equality\nvar streamB = splinter.match({ foo: [ 'bar' ] });\n\n// functions are passed the output of `toValue`.\nvar streamC = splinter.match(function (value) {\n    // should return true/false\n    return value > 20;\n});\n```\n\n## License\n\nMIT\n\n",
  "readmeFilename": "README.md",
  "_id": "splinter@0.0.1",
  "_shasum": "56eb6d1eb5d207a5a7e16dc9d7041ef4fee46942",
  "_from": "splinter@0.0.1",
  "_resolved": "https://registry.npmjs.org/splinter/-/splinter-0.0.1.tgz"
}
